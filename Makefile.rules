# KallistiOS ##version##
#
# Makefile.rules
# Copyright (c) 2000, 2001 Megan Potter
# Copyright (c) 2024 Eric Fradella
#

# Global KallistiOS Makefile include

# Default build archs
KOS_BUILD_SUBARCHS ?= naomi pristine

# Build rules
ifndef KOS_DEPDIR

%.o: %.c
	kos-cc $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.o: %.cc
	kos-c++ $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@

%.o: %.cpp
	kos-c++ $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@

%.o: %.m
	kos-cc $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.o: %.mm
	kos-c++ $(CFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@

else

%.o: %.c
	kos-cc $(CFLAGS) $(CPPFLAGS) -c $< -o $@ -MD -MF $(KOS_DEPDIR)/$(patsubst %.c,%.md,$(subst /,__,$(subst ..,,$<)))

%.o: %.cc
	kos-c++ $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@ -MD -MF $(KOS_DEPDIR)/$(patsubst %.c,%.md,$(subst /,__,$(subst ..,,$<)))

%.o: %.cpp
	kos-c++ $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@ -MD -MF $(KOS_DEPDIR)/$(patsubst %.c,%.md,$(subst /,__,$(subst ..,,$<)))

%.o: %.m
	kos-cc $(CFLAGS) $(CPPFLAGS) -c $< -o $@ -MD -MF $(KOS_DEPDIR)/$(patsubst %.m,%.md,$(subst /,__,$(subst ..,,$<)))

%.o: %.mm
	kos-c++ $(CFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@ -MD -MF $(KOS_DEPDIR)/$(patsubst %.mm,%.md,$(subst /,__,$(subst ..,,$<)))

-include $(wildcard $(KOS_DEPDIR)/*.md)

endif

.PHONY: all_naomi all_pristine

all_naomi: $(if $(filter $(KOS_BUILD_SUBARCHS),naomi),all)

all_pristine: $(if $(filter $(KOS_BUILD_SUBARCHS),pristine),all)

%.o: %.s
	kos-as $< -o $@

%.o: %.S
	kos-cc -c $< -o $@

%.bin: %.elf
	kos-objcopy -O binary $< $@

subdirs: $(patsubst %, _dir_%, $(SUBDIRS))

$(patsubst %, _dir_%, $(SUBDIRS)):
	$(MAKE) -C $(patsubst _dir_%, %, $@)

clean_subdirs: $(patsubst %, _clean_dir_%, $(SUBDIRS))

$(patsubst %, _clean_dir_%, $(SUBDIRS)):
	$(MAKE) -C $(patsubst _clean_dir_%, %, $@) clean

# Define KOS_ROMDISK_DIR in your Makefile if you want these two handy rules.
ifdef KOS_ROMDISK_DIR
romdisk.img:
	$(KOS_GENROMFS) -f romdisk.img -d $(KOS_ROMDISK_DIR) -v -x .keepme -x .DS_Store -x Thumbs.db

romdisk.o: romdisk.img
	$(KOS_BASE)/utils/bin2c/bin2c romdisk.img romdisk_tmp.c romdisk
	$(KOS_CC) $(KOS_CFLAGS) -o romdisk_tmp.o -c romdisk_tmp.c
	$(KOS_CC) -o romdisk.o -r romdisk_tmp.o $(KOS_LIB_PATHS) -Wl,--whole-archive -lromdiskbase
	rm romdisk_tmp.c romdisk_tmp.o
endif

define KOS_GCCVER_MIN_CHECK
$(shell \
	awk 'BEGIN { \
		split("$(1)", min, "."); \
		split("$(KOS_GCCVER)", cur, "."); \
		if (cur[1] > min[1] || \
			(cur[1] == min[1] && cur[2] > min[2]) || \
			(cur[1] == min[1] && cur[2] == min[2] && cur[3] >= min[3])) { \
			print 1; \
		} else { \
			print 0; \
		} \
	}')
endef

define KOS_GCCVER_MIN_WARNING
@echo "Skipping $(TARGET) build as current GCC version ($(KOS_GCCVER)) is less than $(KOS_GCCVER_MIN)."
endef
